'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fonk = require('@lemoncode/fonk');

var VALIDATOR_TYPE = 'POSITIVE_NUMBER';
var defaultMessage = 'The value must be a positive number';
var setErrorMessage = function setErrorMessage(message) {
  return defaultMessage = message;
};
var defaultCustomArgs = {
  strictTypes: false,
  allowZero: true
};
var setCustomArgs = function setCustomArgs(customArgs) {
  return defaultCustomArgs = Object.assign(Object.assign({}, defaultCustomArgs), customArgs);
};

var validateType = function validateType(value, args) {
  return !args.strictTypes || typeof value === 'number';
};

var validate = function validate(value, args) {
  return !isNaN(Number(value)) && (args.allowZero ? value >= 0 : value > 0);
};

var isDefined = function isDefined(value) {
  return value !== void 0 && value !== null && value !== '';
};

var validator = function validator(fieldValidatorArgs) {
  var value = fieldValidatorArgs.value,
      _fieldValidatorArgs$m = fieldValidatorArgs.message,
      message = _fieldValidatorArgs$m === void 0 ? defaultMessage : _fieldValidatorArgs$m,
      _fieldValidatorArgs$c = fieldValidatorArgs.customArgs,
      customArgs = _fieldValidatorArgs$c === void 0 ? defaultCustomArgs : _fieldValidatorArgs$c;
  var args = Object.assign(Object.assign({}, defaultCustomArgs), customArgs);
  var succeeded = !isDefined(value) || validateType(value, args) && validate(value, args);
  return {
    succeeded: succeeded,
    message: succeeded ? '' : fonk.parseMessageWithCustomArgs(message, args),
    type: VALIDATOR_TYPE
  };
};

var validator$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  setErrorMessage: setErrorMessage,
  setCustomArgs: setCustomArgs,
  validator: validator
});

exports.positiveNumber = validator$1;
